package main

import (
	"runtime"
	"strings"
	"testing"
)

func TestZeroPadding(t *testing.T) {
	testStr1 := "123456789"
	testStr2 := "1234567890qwertyu"
	testStr3 := "1234567890qwerty"

	cases := []struct {
		origData       []byte
		exceptedLength int
	}{
		{[]byte(testStr1), 16},
		{[]byte(testStr2), 16},
		{[]byte(testStr2), 32},
		{[]byte(testStr3), 16},
	}

	for _, c := range cases {
		result := ZeroPadding(c.origData, c.exceptedLength)
		if len(result)%c.exceptedLength != 0 {
			t.Fatalf(
				"ZeroPadding function failed, origDataLength: %d, execptedLength:%d, resultLength:%d",
				len(c.origData),
				c.exceptedLength,
				len(result))
		}
	}
	t.Log("ZeroPadding function pass.")
}

func TestZeroUnPadding(t *testing.T) {
	testStr1 := "123456789"
	testStr2 := "1234567890qwertyu"
	testStr3 := "1234567890qwerty"

	testCase1 := ZeroPadding([]byte(testStr1), 16)
	testCase2 := ZeroPadding([]byte(testStr2), 16)
	testCase3 := ZeroPadding([]byte(testStr2), 32)
	testCase4 := ZeroPadding([]byte(testStr3), 16)

	cases := []struct {
		first    []byte
		excepted string
	}{
		{testCase1, testStr1},
		{testCase2, testStr2},
		{testCase3, testStr2},
		{testCase4, testStr3},
	}

	for _, c := range cases {
		result, _ := ZeroUnPadding(c.first)
		if strings.Compare(string(result), c.excepted) != 0 {
			t.Fatalf(
				"ZeroUnPadding function failed, unpadding string: %s, execpted: %s, result: %s",
				c.first,
				c.excepted,
				result,
			)
		}
	}
	t.Log("ZeroUnPadding function pass.")
}

func TestAES(t *testing.T) {
	testStr1 := []byte("hellworld!")
	testStr2 := []byte("因项目中go程序与java程序需要传输一些加密数据，以下为整理后的Aes(CBC模式)加密解密方法，因java中aes所用的填充算法为PKCS5padding(具体内容可自行查阅)，所以在本示例中也采用PKCS5padding")
	testKey := []byte("1234567890qwerty")

	cases := []struct {
		first    []byte
		excepted []byte
	}{
		{AesEncrypt(testStr1, testKey), testStr1},
		{AesEncrypt(testStr2, testKey), testStr2},
	}

	for _, c := range cases {
		result := AesDecrypt(c.first, testKey)
		if strings.Compare(string(c.excepted), string(result)) != 0 {
			t.Fatalf("length of first: %d, length of result: %d", len(c.first), len(result))
		}
	}
}

func TestXore(t *testing.T) {
	testStr1 := []byte("hellworld!")
	testStr2 := []byte("因项目中go程序与java程序需要传输一些加密数据，以下为整理后的Aes(CBC模式)加密解密方法，因java中aes所用的填充算法为PKCS5padding(具体内容可自行查阅)，所以在本示例中也采用PKCS5padding")
	testKey := []byte{0x73, 0x8B, 0x55, 0x44}

	cases := []struct {
		first    []byte
		excepted []byte
	}{
		{testStr1, []byte{0x1b, 0xee, 0x39, 0x28, 0x4, 0xe4, 0x27, 0x28, 0x17, 0xaa}},
		{testStr2, []byte{0x96, 0x10, 0xf5, 0xad, 0xd2, 0x32, 0xb2, 0xdf, 0xdd, 0x6f, 0xed, 0xe9, 0x14, 0xe4, 0xb2, 0xec, 0xf8, 0x6e, 0xef, 0xcb, 0x97, 0x33, 0xdb, 0x2e, 0x12, 0xfd, 0x34, 0xa3, 0xdb, 0x0, 0xb0, 0xfe, 0xfc, 0x62, 0xc9, 0xc4, 0x9b, 0x2d, 0xd4, 0xa0, 0xcf, 0x2b, 0xbd, 0xfa, 0xe0, 0x6f, 0xed, 0xc4, 0x97, 0x31, 0xce, 0xa1, 0xf9, 0x2b, 0xb0, 0xeb, 0xf5, 0x6d, 0xc0, 0xf4, 0x95, 0x6, 0xfb, 0xab, 0xcf, 0x7, 0xb1, 0xff, 0xd6, 0x6f, 0xed, 0xcf, 0x97, 0x33, 0xef, 0xa2, 0xe6, 0x3f, 0xb2, 0xd4, 0xf5, 0x6e, 0xc5, 0xca, 0x94, 0x11, 0xd1, 0x5, 0x16, 0xf8, 0x7d, 0x7, 0x31, 0xc8, 0xb3, 0xec, 0xd2, 0x6e, 0xe9, 0xcb, 0x5a, 0x6e, 0xdf, 0xe4, 0x96, 0x24, 0xd3, 0xac, 0xd4, 0x28, 0xb0, 0xeb, 0xf5, 0x6d, 0xc3, 0xfd, 0x95, 0x38, 0xc0, 0xab, 0xcf, 0x7, 0xb0, 0xdf, 0xd3, 0xe1, 0x34, 0x32, 0x12, 0x6f, 0xed, 0xe9, 0x12, 0xee, 0x26, 0xa2, 0xfa, 0xb, 0xb2, 0xd0, 0xdb, 0x6c, 0xcf, 0xc0, 0x96, 0x2a, 0xfe, 0xa1, 0xf6, 0xe, 0xb2, 0xea, 0xe4, 0x6d, 0xe6, 0xd1, 0x97, 0x33, 0xef, 0x14, 0x38, 0xc8, 0x6, 0x71, 0x3, 0xea, 0x31, 0x20, 0x1a, 0xe5, 0x32, 0x6c, 0x96, 0xe, 0xe2, 0xa0, 0xce, 0x18, 0xb0, 0xc2, 0xf6, 0x6e, 0xfb, 0xfd, 0x96, 0x4, 0xfa, 0xac, 0xf4, 0x21, 0xbd, 0xe5, 0xff, 0x6d, 0xca, 0xe1, 0x9a, 0x13, 0xd0, 0x6d, 0x9c, 0x37, 0xd9, 0xa2, 0xfa, 0xb, 0xb1, 0xff, 0xd6, 0x6e, 0xc9, 0xec, 0x95, 0x17, 0xf9, 0xa3, 0xd7, 0x31, 0xb1, 0xfa, 0xf8, 0x6f, 0xed, 0xe9, 0x97, 0x32, 0xca, 0xad, 0xf4, 0xc, 0xb2, 0xd0, 0xdb, 0xdb, 0x1e, 0x7, 0x20, 0xbe, 0x25, 0x25, 0x17, 0xef, 0x3c, 0x2a, 0x14}},
	}

	for _, c := range cases {
		result := xore(c.first, testKey)
		for i := 0; i < len(c.excepted); i++ {
			if result[i] != c.excepted[i] {
				t.Fatalf(
					"Xore function failed, first: %s, fail index: %d, excepted value: 0x%x, result value: 0x%x",
					c.first,
					i,
					c.excepted[i],
					result[i],
				)
			}
		}
	}
}

func TestParamToList(t *testing.T) {
	cases := []struct {
		first    string
		excepted []string
	}{
		{"127.0.0.1", []string{"127.0.0.1"}},
		{"./testdata", []string{"127.0.0.1", "192.168.255.255"}},
		{"./notExistFile", nil},
	}
	for _, c := range cases {
		result, err := paramToList(c.first)
		for i := 0; i < len(result); i++ {
			if strings.Compare(c.excepted[i], result[i]) != 0 {
				t.Fatalf(
					"paramToList function failed, at index: %d, first: %s, result: %s, excepted: %s",
					i,
					c.first,
					result[i],
					c.excepted[i],
				)
			}
			if err != nil {
				t.Log(err)
			}
		}
	}
}

func TestExploit(t *testing.T) {
	case1 := "10.223.45.142"
	exploit(case1, nil)
}

func TestInvokeExploit(t *testing.T) {
	filePath := "./testdata"
	runtime.GOMAXPROCS(1)
	targetList, _ := paramToList(filePath)
	InvokExploit(targetList)
}

func BenchmarkInvokeExploit(b *testing.B) {
	filePath := "./data.test"
	targetList, _ := paramToList(filePath)
	runtime.GOMAXPROCS(1)
	InvokExploit(targetList)
}
