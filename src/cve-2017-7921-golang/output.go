package main

import (
	"fmt"
	"os"

	"github.com/go-vgo/robotgo"
)

var finishedMission int = 0
var progressFlag bool = false

// CheckError prints error infomation and exits the program
// if err is not none
func CheckError(err error) {
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ERROR] %s\n", err)
		os.Exit(1)
	}
}

// OutputConfig stores output path and its file handler
type OutputConfig struct {
	path string
	File *os.File
}

// OutputMethod declares some method of the Output struct
type OutputMethod interface {
	SetPath()
}

// SetPath sets the path and the file handler of the Output struct
func (o *OutputConfig) SetPath(path string) {
	o.path = path
	if o.path == "" {
		o.File = os.Stdout
	} else {
		tmp, err := os.OpenFile(o.path, os.O_CREATE|os.O_RDWR, 0666)
		CheckError(err)
		o.File = tmp
	}
}

// Output is the global variable stores output path and its file handler
var Output OutputConfig

// ExploitOutput outputs different format by OutputConfig's File field
// in exploit function
func ExploitOutput(target, username, password string) {
	var msg string
	if Output.File == os.Stdout {
		msg = fmt.Sprintf("[+] %-20s- The target is vulnerable. Username: \"%s\"  Password: \"%s\"\n", target, username, password)
	} else {
		msg = fmt.Sprintf("%s,%s,%s\n", target, username, password)
	}
	Output.File.WriteString(msg)
}

// VerifyPasswordOutput outputs different format by OutputConfig's File field
// in verifyPassword function
func VerifyPasswordOutput(target, username, password string) {
	var msg string
	if Output.File == os.Stdout {
		msg = fmt.Sprintf("[ATTEMPT] target %15s - username: \"%s\" - password: \"%s\"\n", target, username, password)
	} else {
		msg = fmt.Sprintf("%s,%s,%s\n", target, username, password)
	}
	Output.File.WriteString(msg)
}

func progressInfo(current, total int) {
	rate := float32(current) / float32(total) * 100
	fmt.Printf("About %.2f%% done. (%d/%d)\n", rate, current, total)
}

func autoPrintProgress(current, total int) {
	if current != 0 && current <= total && progressFlag {
		if current%(total/10) == 0 {
			progressInfo(current, total)
			progressFlag = false
		}
	}
}

func printProgress(total int) {
	go func() {
		for true {
			autoPrintProgress(finishedMission, total)
		}
	}()
	go func() {
		for true {
			ok := robotgo.AddEvent("w")
			if ok {
				progressInfo(finishedMission, total)
			}
		}
	}()
}
